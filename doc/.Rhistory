paper_title=lin.str[2]
journal_name=lin.str[3]
list(author_id,
paper_id,
coauthor_list,
paper_title,
journal_name)
}
data_list=list(1:length(data.files))
for(i in 1:length(data.files)){
## Step 0 scan in one line at a time.
dat=as.list(readLines(paste(data.lib, data.files[i], sep="/")))
#ASDFASDF
data_list[[i]]=lapply(dat, f.line.proc, nam.query=query.list[i])
}
for (i in 1:length(query.list))
{
mat=data_list[[i]]
## Turn nested list into one data frame:
textFileDfList <- lapply(mat,  function(listLevel3){
## Paste multiple entries (e.g. vector of co-authors)
## together to create a single character entry:
simplifiedList <- lapply(listLevel3,
function(entries) paste(entries, collapse = ", "))
## Create data.frame:
outDf <- as.data.frame(simplifiedList,
stringsAsFactors = FALSE,
col.names =  c("author ID", "paper ID", "coauthor names",
"paper title", "journal title")
)
## Combine data frames of the single entries to one data frame,
## containing all entries of the text file:
textFileDf <- do.call('cbind', outDf)
})
## Combine data frames of the text files to one big data frame:
bigDataFrame <- as.data.frame(do.call('rbind', textFileDfList))
bigDataFrame$author.names = query.list[i]
write.csv(bigDataFrame, file = paste("/Users/xuehan/Desktop/Spr2017-proj4-team-9/data/nameset/", query.list[i], ".csv", sep=""))
}
file.choose()
file.choose()
setwd("/Users/xuehan/Desktop/5241MachineLearning/HW/HW5")
H<-matrix(readBin("/Users/xuehan/Desktop/5241MachineLearning/HW/HW5/histograms.bin", "double", 640000), 40000, 16)
dim(H)
rowSums(H)
?cutree
hc <- hclust(dist(USArrests))
cutree(hc, k = 1:5)
h_result<-cutree(h,k=1:length(unique(AKumar$AuthorID)))
dim(hclust())
dim(h_result)
h<-hclust(dist(dtm_train_tfidf*lambda),method="complete")
h_result<-cutree(h,k=length(unique(AKumar$AuthorID)))
table(h_result)
h_result<-cutree(h)
table(h)
subclust<-cutree(h,k=1:length(unique(AKumar$AuthorID)))
dim(subclust)
h<-hclust(dist(dtm_train_tfidf*lambda),method="complete")
h$method
h$dist.method
h$merge
h$labels
h
h<-hclust(dist(dtm_train_tfidf*lambda),method="centriod")
h<-hclust(dist(dtm_train_tfidf*lambda),method="centroid")
h
h<-hclust(dist(dtm_train_tfidf*lambda),method="median")
h
plot(h_result)
plot(h)
hc <- hclust(dist(USArrests))
hc
plot(hc)
hc$height
dim(USArrests)
hc$labels
hc$dist.method
hc$merge
hc$order
h_result<-cutree(h,k=length(unique(AKumar$AuthorID)))
table(h_result)
cutree(h,k=nrow(dtm_train_tfidf*lambda)))
cutree(h,k=nrow(dtm_train_tfidf*lambda))
subclust<-vector()
for (i in 1:nrow()){
subclust[i]<-cutree(h,k=nrow(dtm_train_tfidf*lambda)-i+1)
}
for (i in 1:nrow(dtm_train_tfidf*lambda)){
subclust[i]<-cutree(h,k=nrow(dtm_train_tfidf*lambda)-i+1)
}
subclust
subclust<-list()
for (i in 1:nrow(dtm_train_tfidf*lambda)){
subclust[[i]]<-cutree(h,k=nrow(dtm_train_tfidf*lambda)-i+1)
}
subclust
dim(subclust) #Each column of the matrix records the cluster classification for each element at each step. (i.e when )
plot(h_result)
h_result<-cutree(h,k=length(unique(AKumar$AuthorID)))
?hclust
?cutree
h$merge
?hclust
AKumar
it_train <- itoken(AKumar$Paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = AKumar$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
#vocab
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
dim(dtm_train)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
dim(AKumar)
dim(dtm_train_tfidf)
dtm_train_tfidf<-rbind(dtm_train_tfidf,AKumar$AuthorID)
dtm_train_tfidf<-rbind(dtm_train_tfidf,as.vector(AKumar$AuthorID))
AKumar$AuthorID
vector(AKumar$AuthorID)
dtm_train_tfidf<-rbind(dtm_train_tfidf,as.numeric(AKumar$AuthorID))
dim(as.numeric(AKumar$AuthorID))
length(as.numeric(AKumar))
length(as.numeric(AKumar$AuthorID))
dtm_train_tfidf<-rbind(dtm_train_tfidf,as.matrix(AKumar$AuthorID))
as.matrix(AKumar$AuthorID)
as.matrix(as.numeric(AKumar$AuthorID))
dtm_train_tfidf<-rbind(dtm_train_tfidf,as.matrix(as.numeric(AKumar$AuthorID)))
dim(as.matrix(as.numeric(AKumar$AuthorID)))
dtm_train_tfidf<-cbind(dtm_train_tfidf,as.numeric(AKumar$AuthorID))
cbind(c(1,2,3,4),cbind(0,0,0,0))
cbind(c(1,2,3,4),c(0,0,0,0))
as.numeric(AKumar$AuthorID)
t(as.numeric(AKumar$AuthorID))
dtm_train_tfidf<-cbind(dtm_train_tfidf,t(as.numeric(AKumar$AuthorID)))
dim(dtm_train_tfidf)
it_train <- itoken(AKumar$Paper,
preprocessor = tolower,
tokenizer = word_tokenizer,
ids = AKumar$PaperID,
# turn off progressbar because it won't look nice in rmd
progressbar = FALSE)
vocab <- create_vocabulary(it_train, stopwords = c("a", "an", "the", "in", "on",
"at", "of", "above", "under"))
vectorizer <- vocab_vectorizer(vocab)
dtm_train <- create_dtm(it_train, vectorizer)
tfidf <- TfIdf$new()
dtm_train_tfidf <- fit_transform(dtm_train, tfidf)
dim(dtm_train_tfidf)
dtm_train_tfidf<-cbind(dtm_train_tfidf,as.numeric(AKumar$AuthorID))
dist(dtm_train_tfidf)
dim(dtm_train_tfidf)
for (i in 1:nrow(dtm_train_tfidf)){
for (j in 1:ncol(dtm_train_tfidf)){
distance<-ifelse(i==j,0,dist(dtm_train_tfidf[i,],dtm_train_tfidf[j,]))
}
}
distance
distance<-dist(dtm_train_tfidf[i,],dtm_train_tfidf[j,])
for (i in 1:nrow(dtm_train_tfidf)){
for (j in 1:ncol(dtm_train_tfidf)){
distance<-dist(dtm_train_tfidf[i,],dtm_train_tfidf[j,])
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf),ncol=ncol(dtm_train_tfidf))
for (i in 1:nrow(dtm_train_tfidf)){
for (j in 1:ncol(dtm_train_tfidf)){
distance[i,j]<-dist(dtm_train_tfidf[i,],dtm_train_tfidf[j,])
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf),ncol=nrow(dtm_train_tfidf))
for (i in 1:nrow(dtm_train_tfidf)){
for (j in 1:nrow(dtm_train_tfidf)){
distance[i,j]<-dist(dtm_train_tfidf[i,],dtm_train_tfidf[j,])
}
}
dist(dtm_train_tfidf[1, ],dtm_train_tfidf[2, ])
dist(dtm_train_tfidf)
str(dist(dtm_train_tfidf))
244*666
dim(dtm_train_tfidf)
244*667
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-dist(dtm_train_tfidf[i,-1],dtm_train_tfidf[j,-1])
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
dim(distance)
distance
min(distance)
min(distance[distance!=0])
which.min(distance[distance!=0])
distance[distance!=0]
dim(distance)
dist<-distance[distance!=0]
dim(dist)
length(dist)
dist<-distance[distance!=0]
which.min(distance[distance!=0])
dim(distance)
dim(distance1=0)
dim(distance!=0)
distance!=0
which(distance == min(distance), arr.ind = TRUE)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,NULL,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i!=j,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2),NULL)
}
}
which(x == min(distance))
which(distance == min(distance))
which(distance == min(distance),arr.id=T)
which(distance == min(distance),arr.ind=T)
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
ind<-which(distance == min(distance),arr.ind=T)
ind
names(ind)
str(ind)
ind[[2]]
ind
length(ind)
S<--distance
ind[ind]
ind
distance[ind]
distance
View(distance)
min(distance)
which.min(distance)
ditance[which.min(distance)]
distance[which.min(distance)]
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,NA,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
distance
ind<-which(distance == min(distance),arr.ind=T)
ind
min(distance)
min(distance[distance!=NA])
distance[distance!=NA]
distance[distance!="NA"]
mis(distance[distance!="NA"])
min(distance[distance!="NA"])
distance
min(c(NA,1,3,4,5,))
min(c(NA,1,3,4,5,8))
min(c(NULL,1,3,4,5,8))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,NULL,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
min(distance)
distance
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
if (i==j){
distance[i,j]<-NULL
}
else{
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
}
i=1
j=1
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
if (i==j){
distance[i,j]<-NULL
}
else{
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,NULL,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
View(distance)
str(distance)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-as.numeric(ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)))
}
}
distance
distance<-as.numeric(distance)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
distance<-as.numeric(distance)
distance
min(distance)
min(distance[distance!=NA])
min(distance[distance!="NA"])
na.omit(distance)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,i]<-NULL
}
diag(distance)
diag(distance)<-NULL
diag(distance)<-rep(NULL,length(diag(distance))
)
rep(NULL,length(diag(distance))
)
rep(1,3)
length(diag(distance))
rep(NULL,244)
S<--distance
max(S)
which.max(S)
S[which.max(S)]
ind<-which(distance == min(distance),arr.ind=T)
distance[ind]
ind
distance[distance==0]<-NULL
distance[distance==0]<-NA
distance[diag(distance)]<-NULL
distance[diag(distance)]<-"NULL"
distance
min(distance)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
distance
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
ind<-which(distance == max(distance),arr.ind=T)
ind
S<--distance
ind<-which(distance == max(distance),arr.ind=T)
ind
S<-(-distance)
S
ind<-which(S == max(S),arr.ind=T)
ind
ind$"ncol"
str(ind)
ind[[1]]
ind[[3]]
ind[[99]]
ind<-matrix(which(S == max(S),arr.ind=T))
ind
ind<-matrix(which(S == max(S),arr.ind=T),ncol=2,byrow=T)
ind
ind<-matrix(which(S == max(S),arr.ind=T),ncol=2,byrow=F)
ind
ind<-ind[ind[,1]!=ind[,2]]
ind
ind[,1]!=ind[,2]
ind[,-1]
ind[,1]
dim(ind)
ind<-matrix(which(S == max(S),arr.ind=T),ncol=2,byrow=F)
dim(ind)
ind[,1]
ind<-ind[ind[,1]!=ind[,2]]
ind
h<-hclust(dist(dtm_train_tfidf*lambda),method="median")
h_result<-cutree(h,k=length(unique(AKumar$AuthorID)))
table(h_result)
h_result<-cutree(h,k=nrow(unique(AKumar$AuthorID)))
table(h_result)
h_result<-cutree(h,k=nrow(AKumar$AuthorID))
table(h_result)
h_result<-cutree(h,k=nrow(AKumar))
table(h_result)
h_result<-cutree(h,k=nrow(AKumar)-1)
table(h_result)
h$merge
h<-hclust(dist(dtm_train_tfidf*lambda),method="median")
h
h$height
plot(h)
distance
NULL
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,NULL,sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
length(NULL)
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-ifelse(i==j,"NULL",sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2))
}
}
distance<-matrix(NA,nrow=nrow(dtm_train_tfidf[,-1]),ncol=nrow(dtm_train_tfidf[,-1]))
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
for (i in 1:nrow(dtm_train_tfidf[,-1])){
for (j in 1:nrow(dtm_train_tfidf[,-1])){
distance[i,j]<-sum((dtm_train_tfidf[i,-1]-dtm_train_tfidf[j,-1])^2)
}
}
for(i in 1:nrow(dtm_train_tfidf[,-1])) {
distance[i,i] <- NULL
}
for(i in 1:nrow(dtm_train_tfidf[,-1])) {
distance[i,i] <- 999999
}
min(distance)
S<-(-distance)
ind<-matrix(which(S == max(S),arr.ind=T),ncol=2,byrow=F)
ind<-ind[ind[,1]!=ind[,2]]
S[which.max(S)]
S<-(-distance)
ind<-matrix(which(S == max(S),arr.ind=T),ncol=2,byrow=F)
ind
View(distance)
View(S)
min(distance)
which(distance==0)
244^2
5214/244
5214-244*21
distance90,21
distance[90,21]
distance[21,90]
head(sort(distance))
a <- as.vector(distance)
head(sort(a))
which(a==0)
b<matrix(1:4,2,2)
b<-matrix(1:4,2,2)
b
as.vector(b)
tail(a,6)
for(i in 1:nrow(dtm_train_tfidf[,-1])) {
distance[i,i] <- 9
}
a <- as.vector(distance)
tail(a,6)
head(sort(a))
min(a!=0)
max(a)
min(distance!=0)
max(distance!=0)
a <- as.vector(distance)
mode(distance[1,1])
mode(distance)
